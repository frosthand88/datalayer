import oracledb
import random
import time
from faker import Faker
import os
from datetime import datetime, timedelta
from oracledb import OperationalError

fake = Faker()

def connect_to_oracle():
    attempts = 0
    max_retries = 10  # Maximum number of retries
    while attempts < max_retries:
        try:
            conn_local = oracledb.connect(user=os.getenv("DB_USER"), password=os.getenv("DB_PASS"), dsn=os.getenv("DB_HOST"))
            print("Connection successful!")
            return conn_local
        except OperationalError as e:
            print(f"Connection failed. Retrying... ({attempts+1}/{max_retries})")
            time.sleep(10)  # Wait for 10 seconds before retrying
            attempts += 1

    print("Failed to connect after several attempts.")
    return None

def safe_merge(cursor, table, col1, col2, val1, val2):
    cursor.execute(f"""
        MERGE INTO {table} t
        USING (SELECT :1 AS c1, :2 AS c2 FROM dual) vals
        ON (t.{col1} = vals.c1 AND t.{col2} = vals.c2)
        WHEN NOT MATCHED THEN
            INSERT ({col1}, {col2})
            VALUES (vals.c1, vals.c2)
    """, (val1, val2))

# Try connecting to the database
conn = connect_to_oracle()

cur = conn.cursor()
n = 100000
nj = 1000000
start_date = datetime(2000, 1, 1)

print("Creating tables...")
tables = [
    """
    CREATE TABLE researcher (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        name VARCHAR2(255) NOT NULL
    )
    """,
    """
    CREATE TABLE paper (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        title VARCHAR2(255) NOT NULL
    )
    """,
    """
    CREATE TABLE topic (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        name VARCHAR2(255) NOT NULL
    )
    """,
    """
    CREATE TABLE conference (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        name VARCHAR2(255) NOT NULL,
        year NUMBER
    )
    """,
    """
    CREATE TABLE organization (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        name VARCHAR2(255) NOT NULL
    )
    """,
    """
    CREATE TABLE researcher_paper (
        researcher_id NUMBER REFERENCES researcher(id),
        paper_id NUMBER REFERENCES paper(id),
        PRIMARY KEY (researcher_id, paper_id)
    )
    """,
    """
    CREATE TABLE paper_topic (
        paper_id NUMBER REFERENCES paper(id),
        topic_id NUMBER REFERENCES topic(id),
        PRIMARY KEY (paper_id, topic_id)
    )
    """,
    """
    CREATE TABLE topic_conference (
        topic_id NUMBER REFERENCES topic(id),
        conference_id NUMBER REFERENCES conference(id),
        PRIMARY KEY (topic_id, conference_id)
    )
    """,
    """
    CREATE TABLE conference_org (
        conference_id NUMBER REFERENCES conference(id),
        org_id NUMBER REFERENCES organization(id),
        PRIMARY KEY (conference_id, org_id)
    )
    """
]
for stmt in tables:
    cur.execute(stmt)
conn.commit()

print("Seeding base tables...")
for i in range(n):
    date = start_date + timedelta(days=i)
    cur.execute("INSERT INTO researcher (name, created_at) VALUES (:1, :2)", (fake.name(), date))
    cur.execute("INSERT INTO paper (title, created_at) VALUES (:1, :2)", (fake.sentence(nb_words=4), date))
    cur.execute("INSERT INTO topic (name, created_at) VALUES (:1, :2)", (fake.word(), date))
    cur.execute("INSERT INTO conference (name, year, created_at) VALUES (:1, :2, :3)", (fake.company(), fake.year(), date))
    cur.execute("INSERT INTO organization (name, created_at) VALUES (:1, :2)", (fake.company(), date))

print("Seeding join tables...")
for _ in range(nj):
    safe_merge(cur, "researcher_paper", "researcher_id", "paper_id",
               random.randint(1, n), random.randint(1, n))
    safe_merge(cur, "paper_topic", "paper_id", "topic_id",
               random.randint(1, n), random.randint(1, n))
    safe_merge(cur, "topic_conference", "topic_id", "conference_id",
               random.randint(1, n), random.randint(1, n))
    safe_merge(cur, "conference_org", "conference_id", "org_id",
               random.randint(1, n), random.randint(1, n))

conn.commit()
cur.close()
conn.close()
print("Data generation complete.")

